/*DES算法实现
DES算法加解密过程是一样的，整个算法大的方面只包含加密和密钥扩展两部分
加解密：IP+轮函数(F函数+异或)+ IP-1
F函数：E+异或+S-Boxes+P
密钥扩展：PC1+LS+PC2
*/
#include<stdio.h>
#include<memory.h>

int E_Table[48] = {31, 0, 1, 2, 3, 4,
                   3,  4, 5, 6, 7, 8,
                   7,  8, 9,10,11,12,
                   11,12,13,14,15,16,
                   15,16,17,18,19,20,
                   19,20,21,22,23,24,
                   23,24,25,26,27,28,
                   27,28,29,30,31, 0
                  };

//置换函数P
int P_Table[32] = {15,6,19,20,28,11,27,16,
                   0,14,22,25,4,17,30,9,
                   1,7,23,13,31,26,2,8,
                   18,12,29,5,21,10,3,24
                  };

//S盒
int S[8][4][16] = {
	//S1
	{
		{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
		{0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
		{4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
		{15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}
	},
	//S2
	{
		{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
		{3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
		{0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
		{13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}
	},
	//S3
	{	{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
		{13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
		{13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
		{1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}
	},
	//S4
	{
		{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
		{13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
		{10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
		{3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}
	},
	//S5
	{
		{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
		{14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
		{4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
		{11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}
	},
	//S6
	{
		{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
		{10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
		{9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
		{4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}
	},
	//S7
	{
		{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
		{13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
		{1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
		{6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}
	},
	//S8
	{
		{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
		{1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
		{7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
		{2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}
	}
};

int E_Transform(char in[32],char out[48])
{//E变换输入32bit扩展为48比特
	for (int i = 0; i < 48;i++)
	{
		out[i] = in[E_Table[i]];
	}
		return 0;
}

int Sbox(char in[48],char out[32])
{//S盒变换，输出为48bit，输出为32bit
		for (int i = 0; i < 8;i++)//输入in的48个元素，分成8组，每组6个。每组的第一个和最后一个元素构成S盒的行row，中间4个元素构成列col
		{
		int row = in[i * 6] * 2 + in[i * 6 + 5];
		int col = in[i * 6 + 1] * 8 + in[i * 6 + 2] * 4 + in[i * 6 + 3] * 2 + in[i * 6 + 4];
		int value = S[i][row][col]; // 在S盒中取出值
		out[i * 4 + 3] = value & 0x1; // 将S盒的值转化成4位二进制数，利用位操作符
		out[i * 4 + 2] = (value & 0x2) >> 1;
		out[i * 4 + 1] = (value & 0x4) >> 2;
		out[i * 4] = (value & 0x8) >> 3;
		}
		return 0;
}

int P_Transform(char in[32],char out[32])
{//P置换
		for (int i = 0; i < 32;i++)
		{
		out[i] = in[P_Table[i]];
		}
		return 0;
}

int F_Function(char in[32],char out[32],char subkey[48])
{//F函数
		char E_re[48] = {0},S_re[32]={0};
		E_Transform(in, E_re);
		for (int i = 0; i < 48;i++)
		{
			E_re[i] = E_re[i] ^ subkey[i];
		}
		Sbox(E_re, S_re);
		P_Transform(S_re, out);
		return 0;
}

int Round_Function(char in[64],char out[64],char subkey[48])
{//轮函数
		char F_re[32] = {0},R[32]={0},L[32]={0};
		for (int i = 0; i < 32;i++)
		{
			R[i] = in[32 + i];
			L[i] = in[i];
		}
		F_Function(R, F_re, subkey);
		for (int i = 0; i < 32;i++)
		{
			out[i] = R[i];
			out[i + 32] = F_re[i] ^ L[i];
		}
			return 0;
}

int main()
{
	char plain_text[64]={0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,//明文
						 0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,
						 0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,
						 0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,
						 0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,
						 0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,
						 0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
						 0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1
						 };
	char subkey[48]={0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,//秘钥
					 0x0,0x1,0x1,0x0,0x0,0x1,0x0,0x0,
					 0x1,0x0,0x0,0x1,0x0,0x1,0x1,0x1,
					 0x0,0x1,0x0,0x0,0x1,0x1,0x1,0x1,
					 0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,
					 0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x0
					 //0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
					 //0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0
					 };
	char cipher_text[64]={0};

	printf("明文：\n");
	for(int i=0;i<64;i++)
	{
		printf("  %x",plain_text[i]);
		if ((i+1)%16==0) printf("\n");
	}
	printf("子秘钥：\n");
	for(int i=0;i<48;i++)
	{
		printf("  %x",subkey[i]);
		if ((i+1)%16==0) printf("\n");
	}

	Round_Function(plain_text,cipher_text,subkey);

	printf("一轮变换后密文：\n");
	for(int i=0;i<64;i++)
	{
		printf("  %x",cipher_text[i]);
		if ((i+1)%16==0) printf("\n");
	}

	return 0;
}

